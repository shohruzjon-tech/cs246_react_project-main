{"version":3,"file":"static/js/436.4abb8d53.chunk.js","mappings":"yOA2BA,EA1BwB,SAACA,GACvB,IACEC,EAKED,EALFC,MACAC,EAIEF,EAJFE,KACAC,EAGEH,EAHFG,MACAC,EAEEJ,EAFFI,SAJF,EAMIJ,EADFK,KAAQC,EALV,EAKUA,QAASC,EALnB,EAKmBA,MAAOC,EAL1B,EAK0BA,QAE1B,OACE,gCACGL,IACC,kBACEM,UAAS,qBAAgBL,EAAW,WAAa,IACjDM,QAAST,EAAMU,KAFjB,SAIGR,KAGL,4CAAWF,GAAWD,GAAtB,IAA6BY,GAAIX,EAAMU,KAAMF,UAAU,kBACtDP,IAAQ,gBAAKO,UAAU,YAAf,SAA4BP,IACpCI,IACGC,IAAS,gBAAKE,UAAU,mBAAf,SAAmCF,KAC3CC,IAAW,0BAAOA,SCvBhBJ,EAAW,SAACS,GAAD,OACtBA,GAA0B,iBAATA,GAA+B,IAAVA,OAClCC,EACA,0BAKAC,EAAY,SAACC,GAAD,OAAS,SAACH,GAAD,OACzBA,GAASA,EAAMI,OAASD,EAAxB,kBAAyCA,EAAzC,4BAAoEF,IAShEI,GARsBH,EAAU,GACLA,EAAU,IAChBA,EAAU,IACVA,EAAU,IACTA,EAAU,KACVA,EAAU,KACTA,EAAU,KACXA,EAAU,KACpB,SAACI,GAAD,OAAS,SAACN,GAAD,OACzBA,GAASA,EAAMI,OAASE,EAAxB,kBAAyCA,EAAzC,4BAAoEL,KAIhEM,GAH2BF,EAAU,GACfA,EAAU,GACZA,EAAU,GACnB,SAACF,GAAD,OAAS,SAACH,GAAD,OACxBA,GAASA,EAAQG,EAAjB,2BAA2CA,EAA3C,iBAA2DF,KAMvDO,GALwBD,EAAS,iBACTA,EAAS,YACZA,EAAS,KACXA,EAAS,GAEjB,SAACD,GAAD,OAAS,SAACN,GAAD,YACdC,IAAVD,GAAiC,OAAVA,GAA4B,KAAVA,GAAgBA,EAAQM,EAAjE,2BACwBA,QACpBL,KCGN,GDF8BO,EAAS,MACbA,EAAS,IACVA,EAAS,ICAnBC,EAAAA,EAAAA,KACbC,EAAAA,EAAAA,GAAU,CACRC,KAAM,oBAFV,EA5BwB,SAACxB,GACvB,IAAQyB,EAAqDzB,EAArDyB,aAAcC,EAAuC1B,EAAvC0B,WAAYC,EAA2B3B,EAA3B2B,SAAUC,EAAiB5B,EAAjB4B,aAC5C,OACE,kBACED,SAAUF,EAAaE,GACvBlB,UAAS,2BAAsBmB,EAAe,gBAAkB,IAChEC,YAAU,EAHZ,WAKE,SAACC,EAAA,EAAD,CACEnB,KAAK,SACLoB,KAAK,OACL5B,MAAM,eACN6B,UAAWC,EACXC,YAAY,cACZC,SAAU,CAAC/B,GACLA,UAAU,KAElB,mBACE2B,KAAK,SACLtB,UAAU,0CACV2B,SAAUV,EAHZ","sources":["helpers/renderFormField.js","helpers/validation.js","components/others/CouponApplyForm.jsx"],"sourcesContent":["import React from \"react\";\nconst renderFormField = (props) => {\n  const {\n    input,\n    tips,\n    label,\n    required,\n    meta: { touched, error, warning },\n  } = props;\n  return (\n    <>\n      {label && (\n        <label\n          className={`form-label ${required ? \"required\" : \"\"}`}\n          htmlFor={input.name}\n        >\n          {label}\n        </label>\n      )}\n      <input {...input} {...props} id={input.name} className=\"form-control\" />\n      {tips && <div className=\"form-text\">{tips}</div>}\n      {touched &&\n        ((error && <div className=\"invalid-feedback\">{error}</div>) ||\n          (warning && <span>{warning}</span>))}\n    </>\n  );\n};\nexport default renderFormField;\n","export const required = (value) =>\n  value || (typeof value == \"number\" && value === 0)\n    ? undefined\n    : \"This field is required\";\nexport const number = (value) =>\n  value && isNaN(Number(value)) ? \"Must be a number\" : undefined;\nexport const digit = (value) =>\n  value && !/^[0-9]*$/.test(value) ? \"Must be a number\" : undefined;\nconst maxLength = (max) => (value) =>\n  value && value.length > max ? `Must be ${max} characters or less` : undefined;\nexport const maxLengthOTP = maxLength(6);\nexport const maxLengthMobileNo = maxLength(15);\nexport const maxLength20 = maxLength(20);\nexport const maxLength50 = maxLength(50);\nexport const maxLength150 = maxLength(150);\nexport const maxLength500 = maxLength(500);\nexport const maxLength1000 = maxLength(1000);\nexport const maxLength800 = maxLength(800);\nconst minLength = (min) => (value) =>\n  value && value.length < min ? `Must be ${min} characters or more` : undefined;\nexport const minLengthMobileNo = minLength(5);\nexport const minLengthOTP = minLength(6);\nexport const minLength8 = minLength(8);\nconst maxValue = (max) => (value) =>\n  value && value > max ? `Must be at least ${max} or less` : undefined;\nexport const maxValueMobile = maxValue(999999999999999);\nexport const maxValueAmount = maxValue(2147483647);\nexport const maxValue127 = maxValue(127);\nexport const maxValue9 = maxValue(9);\n\nconst minValue = (min) => (value) =>\n  value !== undefined && value !== null && value !== \"\" && value < min\n    ? `Must be at least ${min}`\n    : undefined;\nexport const minValueMobile = minValue(9999);\nexport const minValue10 = minValue(10);\nexport const minValue0 = minValue(0);\nexport const email = (value) =>\n  value && !/^[a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/i.test(value)\n    ? \"Invalid email address\"\n    : undefined;\nexport const name = (value) =>\n  value && !/^[a-zA-Z\\s]*$/i.test(value) ? \"Invalid name\" : undefined;\n  export const fName = (value) =>\n  value && !/^[a-zA-Z\\s]*$/i.test(value) ? \"Invalid father name\" : undefined;\n  export const mName = (value) =>\n  value && !/^[a-zA-Z\\s]*$/i.test(value) ? \"Invalid mother name\" : undefined;\nexport const isOverEighteen = (date) => {\n  let birthday = new Date(date);\n  // eslint-disable-next-line no-new-wrappers\n  let age = new Number(\n    (new Date().getTime() - birthday.getTime()) / 31536000000\n  ).toFixed(0);\n  if (age >= 18) {\n    return undefined;\n  }\n  return \"To successfully open an account you have to be at least 18 years old.\";\n};\n","import React from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { compose } from \"redux\";\nimport renderFormField from \"../../helpers/renderFormField\";\nimport {\n  required,\n} from \"../../helpers/validation\";\n\nconst CouponApplyForm = (props) => {\n  const { handleSubmit, submitting, onSubmit, submitFailed } = props;\n  return (\n    <form\n      onSubmit={handleSubmit(onSubmit)}\n      className={`needs-validation ${submitFailed ? \"was-validated\" : \"\"}`}\n      noValidate\n      >\n      <Field\n        name=\"coupon\"\n        type=\"text\"\n        label=\"Have coupon?\"\n        component={renderFormField}\n        placeholder=\"Coupon code\"\n        validate={[required]}\n              required={true}\n      />\n      <button\n        type=\"submit\"\n        className=\"btn btn-sm btn-primary mt-3 float-right\"\n        disabled={submitting}\n      >\n        Apply\n      </button>\n    </form>\n  );\n};\n\nexport default compose(\n  reduxForm({\n    form: \"couponapplyform\",\n  })\n)(CouponApplyForm);\n"],"names":["props","input","tips","label","required","meta","touched","error","warning","className","htmlFor","name","id","value","undefined","maxLength","max","length","minLength","min","maxValue","minValue","compose","reduxForm","form","handleSubmit","submitting","onSubmit","submitFailed","noValidate","Field","type","component","renderFormField","placeholder","validate","disabled"],"sourceRoot":""}